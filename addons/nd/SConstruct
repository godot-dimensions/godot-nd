#!/usr/bin/env python

# This file is for building as a Godot GDExtension.

env = SConscript("src/godot-cpp/SConstruct")

# Add source files.
env.Append(
    CPPPATH=[
        "./,src/,../../",
        "../../math",
        "../../model",
        "../../model/mesh",
        "../../model/mesh/cell",
        "../../model/mesh/wire",
        "../../model/off",
        "../../nodes",
        "../../render",
        "../../render/wireframe_canvas",
    ]
)

sources = (
    Glob("*.cpp")
    + Glob("src/*.cpp")
    + Glob("../../*.cpp")
    + Glob("../../math/*.cpp")
    + Glob("../../model/*.cpp")
    + Glob("../../model/mesh/*.cpp")
    + Glob("../../model/mesh/cell/*.cpp")
    + Glob("../../model/mesh/wire/*.cpp")
    + Glob("../../model/off/*.cpp")
    + Glob("../../nodes/*.cpp")
    + Glob("../../render/*.cpp")
    + Glob("../../render/wireframe_canvas/*.cpp")
)

env.Append(CPPDEFINES=["GDEXTENSION"])

bin_path = "bin/"
extension_name = "godot_nd"
debug_or_release = "release" if env["target"] == "template_release" else "debug"

if not "arch_suffix" in env:
    env["arch_suffix"] = env["arch"]

if env["target"] == "editor":
    env.Append(CPPPATH=[
        "../../editor",
        "../../editor/icons",
        "../../editor/import",
        "../../editor/import/off",
        "../../editor/viewport",
    ])
    sources += (
        Glob("../../editor/*.cpp")
        + Glob("../../editor/icons/*.cpp")
        + Glob("../../editor/import/*.cpp")
        + Glob("../../editor/import/off/*.cpp")
        + Glob("../../editor/viewport/*.cpp")
    )

if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml")
        )
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

# Create the library target (e.g. libgodot_nd.linux.debug.x86_64.so).
if env["platform"] == "macos":
    library = env.SharedLibrary(
        "{0}/lib{1}.{2}.{3}.framework/{1}.{2}.{3}".format(
            bin_path,
            extension_name,
            env["platform"],
            debug_or_release,
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "{}/lib{}.{}.{}.{}{}".format(
            bin_path,
            extension_name,
            env["platform"],
            debug_or_release,
            env["arch_suffix"],
            env["SHLIBSUFFIX"],
        ),
        source=sources,
    )

Default(library)

# The rest of this file handles generating the ND icons header file.
import importlib.util
import os
import sys
editor_nd_icon_generator_path = os.path.abspath(os.path.join('../../editor/icons/editor_nd_icon_generator.py'))
spec = importlib.util.spec_from_file_location("editor_nd_icon_generator", editor_nd_icon_generator_path)
editor_nd_icon_generator = importlib.util.module_from_spec(spec)
sys.modules["editor_nd_icon_generator"] = editor_nd_icon_generator
spec.loader.exec_module(editor_nd_icon_generator)

target_file_path = "../../editor/icons/editor_nd_icons.gen.h"
icon_sources = Glob("icons/ND.svg") + Glob("icons/NodeND.svg")
editor_nd_icon_generator.make_editor_nd_icons_action([target_file_path], icon_sources, env)
