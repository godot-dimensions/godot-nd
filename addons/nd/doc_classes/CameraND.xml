<?xml version="1.0" encoding="UTF-8" ?>
<class name="CameraND" inherits="NodeND" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		ND camera for projecting ND scenes onto a 2D screen (viewport).
	</brief_description>
	<description>
		CameraND is a camera designed to take ND scenes and project them onto a 2D screen (really a [Viewport]).
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_current">
			<return type="void" />
			<param index="0" name="enable_next" type="bool" />
			<description>
				If this is the current camera, remove it from being current. If [param enable_next] is [code]true[/code], request to make the next camera current, if any. Cameras are activated in a round-robin fashion.
			</description>
		</method>
		<method name="is_position_behind" qualifiers="const">
			<return type="bool" />
			<param index="0" name="global_position" type="PackedFloat64Array" />
			<description>
				Returns [code]true[/code] if the given global position is behind the camera, taking into account the camera's near clipping plane (the blue part of the linked diagram). [url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png]See this diagram[/url] for an overview of position query methods. If [code]true[/code], the position is not visible to the camera. If [code]false[/code], the position may or may not be visible to the camera. This is the ND equivalent of [method Camera3D.is_position_behind].
			</description>
		</method>
		<method name="make_current">
			<return type="void" />
			<description>
				Make this camera the current camera for the ancestor [Viewport]. If another camera is currently active, it will be deactivated. If this camera is already current, this function does nothing. This is the same as setting [member current] to [code]true[/code].
			</description>
		</method>
		<method name="viewport_to_world_ray_direction" qualifiers="const">
			<return type="PackedFloat64Array" />
			<param index="0" name="viewport_position" type="Vector2" />
			<description>
				Given a position in pixels on the viewport, return the direction of the ray cast out from that position in world space. The viewport position should be the position relative to the top-left of the viewport (see [method Viewport.get_mouse_position]), and the returned value is in global space and normalized. This is the ND equivalent of [method Camera3D.project_ray_normal].
			</description>
		</method>
		<method name="viewport_to_world_ray_origin" qualifiers="const">
			<return type="PackedFloat64Array" />
			<param index="0" name="viewport_position" type="Vector2" />
			<description>
				Given a position in pixels on the viewport, return the origin of the ray cast out from that position in world space. The viewport position should be the position relative to the top-left of the viewport (see [method Viewport.get_mouse_position]), and the returned value is in global space. This is the ND equivalent of [method Camera3D.project_ray_origin].
				[b]Note:[/b] For efficiency, this function does not take into account the near clipping plane of the camera.
			</description>
		</method>
		<method name="world_to_viewport" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="global_position" type="PackedFloat64Array" />
			<description>
				Given a global position in world space, return the position in pixels on the viewport. The returned value is relative to the top-left of the viewport (see [method Viewport.get_mouse_position]). This is a wrapper for [method world_to_viewport_local_normal] that works with global world coordinates and pixel viewport coordinates. This is the ND equivalent of [method Camera3D.unproject_position].
			</description>
		</method>
		<method name="world_to_viewport_local_normal" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="local_position" type="PackedFloat64Array" />
			<param index="1" name="force_orthographic" type="bool" default="false" />
			<description>
				Given a local position relative to the camera, return the normalized coordinates on the viewport. This is like [method world_to_viewport], but skips converting between coordinate systems, so this method is faster if you do not need to convert.
				The returned value is on the range of -1 to 1 for the direction that [member keep_aspect] is set to keep constant. Due to the way this is calculated (negative Z forward), the X values are positive on the right and the Y values are positive on the bottom. For example, on a 16:9 aspect ratio viewport with [constant KEEP_HEIGHT], the bottom-right corner is (1.777, 1), and the top-left corner is (-1.777, -1).
				If [param force_orthographic] is [code]true[/code], the camera is treated as orthographic, regardless of the actual projection type. This is useful for dimensions fewer than 3, meaning 0D, 1D, and 2D, where a direct mapping to the viewport is possible.
			</description>
		</method>
	</methods>
	<members>
		<member name="current" type="bool" setter="set_current" getter="is_current" default="false">
			If [code]true[/code], the ancestor [Viewport] is currently using this camera. Only one [CameraND] node can be current at a time for each [Viewport].
			If multiple cameras are a descendant of the [Viewport], the cameras will try to keep at least one of them current. For example, if two [CameraND] nodes are present in the scene and only one is current, setting one camera's [member current] to [code]false[/code] will cause the other camera to be made current. If three or more [CameraND] nodes are present in the scene, setting [member current] to [code]false[/code] on the active camera will result in the cameras activating in a round-robin fashion. To deactivate a camera without activating another, use [method clear_current] instead.
		</member>
		<member name="depth_fade" type="bool" setter="set_depth_fade" getter="get_depth_fade" default="false">
			Controls if depth fading is enabled, which means that once things get further than [member depth_fade_start] on the camera's Z axis, they start to fade until they become transparent at [member far]. This is also known as fog.
		</member>
		<member name="depth_fade_start" type="float" setter="set_depth_fade_start" getter="get_depth_fade_start" default="25.0">
			How many units on the camera's Z axis away an edge has to be before it starts fading. Only applies if [member depth_fade] is [code]true[/code]. This is also known as fog.
		</member>
		<member name="far" type="float" setter="set_far" getter="get_far" default="4000.0">
			The distance to the far culling boundary for this camera relative to its local -Z axis. Higher values allow the camera to see further away, while decreasing can improve performance if it results in objects being partially or fully culled. Only has an effect for dimensions 3 and higher.
		</member>
		<member name="field_of_view" type="float" setter="set_field_of_view" getter="get_field_of_view">
			The field of view of the camera when projecting from ND to the screen. This value is in radians, but is displayed as degrees in the inspector. The field of view must be between 0 and TAU / 2 radians (0 and 180 degrees), exclusive. The default field of view is TAU / 4 radians, or 90 degrees. This is only used when [member projection_type] is set to [constant PROJECTION_PERSPECTIVE] and [member view_angle_type] is set to [constant VIEW_ANGLE_FIELD_OF_VIEW].
		</member>
		<member name="focal_length" type="float" setter="set_focal_length" getter="get_focal_length" default="1.0">
			The focal length of the camera when projecting from ND to the screen. The sensor size is always 1 meter for simplicity, meaning that the default focal length of 1 meter results in a 90 degree field of view. This is only used when [member projection_type] is set to [constant PROJECTION_PERSPECTIVE] and [member view_angle_type] is set to [constant VIEW_ANGLE_FOCAL_LENGTH].
		</member>
		<member name="keep_aspect" type="int" setter="set_keep_aspect" getter="get_keep_aspect" enum="CameraND.KeepAspect" default="1">
			Controls whether the FOV, focal length, and/or size properties control the width or height of the camera's view. If [constant KEEP_WIDTH], these properties control the width, and if [constant KEEP_HEIGHT], they control the height. The other dimension will be adjusted to fill the window. By default, the height is kept, and the width is adjusted as the window is resized.
		</member>
		<member name="near" type="float" setter="set_near" getter="get_near" default="0.05">
			The distance to the near culling boundary for this camera relative to its local -Z axis. Lower values allow the camera to see objects closer to its position, at the cost of lower precision across the [i]entire[/i] range. Values lower than the default can lead to increased Z-fighting. Only has an effect for dimensions 3 and higher.
		</member>
		<member name="orthographic_size" type="float" setter="set_orthographic_size" getter="get_orthographic_size">
			The size in meters of the orthographic camera when projecting from ND to 2D. This is only used when [member projection_type] is set to [constant PROJECTION_ORTHOGRAPHIC], or when projecting dimensions lower than 3, meaning 0D, 1D, and 2D.
		</member>
		<member name="perp_fade_distance" type="float" setter="set_perp_fade_distance" getter="get_perp_fade_distance" default="5.0">
			The distance in meters on the camera's local perpendicular axes (W, V, U, etc) at which objects will be fully faded out (in addition to the factor provided by [member perp_fade_slope]). If using transparency, this means the object will be invisible. This is only used when [member perp_fade_mode] is not set to [constant PERP_FADE_DISABLED].
		</member>
		<member name="perp_fade_mode" type="int" setter="set_perp_fade_mode" getter="get_perp_fade_mode" enum="CameraND.PerpFadeMode" default="1">
			Controls if and how objects will fade out as they move farther away from the camera in the local perpendicular axes (W, V, U, etc). When the distance exceeds [member perp_fade_distance], the object will be fully faded out. If using transparency, this means the object will be invisible.
		</member>
		<member name="perp_fade_slope" type="float" setter="set_perp_fade_slope" getter="get_perp_fade_slope" default="1.0">
			The slope of fading objects out as they move farther away from the camera in the local perpendicular axes (W, V, U, etc). This is only used when [member perp_fade_mode] is not set to [constant PERP_FADE_DISABLED].
			Objects farther away from the camera in the local -Z direction will be faded less, and objects farther away in the local perpendicular direction will be faded more. This is similar to how moving away from an object while looking at it will cause it to shrink towards the middle of the viewport, like a "field of view".
			This property controls how strongly each direction is taken into account during fading. Lower values result in a smaller viewing angle, and objects will fade out more quickly. A zero value will mimic the perspective of a 3D being, with no sight of the perpendicular axes. Higher values result in a larger viewing angle, and objects will fade out more slowly.
		</member>
		<member name="projection_type" type="int" setter="set_projection_type" getter="get_projection_type" enum="CameraND.ProjectionType" default="1">
			The type of projection to use for ND to 2D projection. If [constant PROJECTION_ORTHOGRAPHIC], project ND to 2D orthographically. If [constant PROJECTION_PERSPECTIVE], project ND to 2D with perspective.
		</member>
		<member name="rendering_engine" type="String" setter="set_rendering_engine" getter="get_rendering_engine" default="&quot;&quot;">
			The rendering engine to use. Rendering engines must extend [RenderingEngineND] and be registered with [method RenderingServerND.register_rendering_engine] to be available as an option.
		</member>
		<member name="view_angle_type" type="int" setter="set_view_angle_type" getter="get_view_angle_type" enum="CameraND.ViewAngleType" default="0">
			Controls how the view angle or lens is defined: either focal length or field of view. Focal length is in meters, with a sensor size of 1 meter. Field of view is in radians, but is displayed as degrees in the inspector. This property is only used in the inspector, not at runtime.
		</member>
	</members>
	<constants>
		<constant name="KEEP_WIDTH" value="0" enum="KeepAspect">
			When resizing the 2D window, keep the view width constant. The FOV, focal length, and/or size properties will control the width of the camera's view. The height will be adjusted to fill the window.
		</constant>
		<constant name="KEEP_HEIGHT" value="1" enum="KeepAspect">
			When resizing the 2D window, keep the view height constant. The FOV, focal length, and/or size properties will control the height of the camera's view. The width will be adjusted to fill the window.
		</constant>
		<constant name="PROJECTION_ORTHOGRAPHIC" value="0" enum="ProjectionType">
			Use orthographic projection when projecting ND to 2D.
		</constant>
		<constant name="PROJECTION_PERSPECTIVE" value="1" enum="ProjectionType">
			Use perspective projection when projecting ND to 2D.
		</constant>
		<constant name="VIEW_ANGLE_FOCAL_LENGTH" value="0" enum="ViewAngleType">
			Use focal length to control the view angle. The sensor size is always 1 meter for simplicity. This is only used in the inspector, not at runtime.
		</constant>
		<constant name="VIEW_ANGLE_FIELD_OF_VIEW" value="1" enum="ViewAngleType">
			Use field of view to control the view angle. This is only used in the inspector, not at runtime.
		</constant>
		<constant name="PERP_FADE_DISABLED" value="0" enum="PerpFadeMode">
			Objects will not fade out as they move farther away from the camera in the local perpendicular axes (W, V, U, etc). Only has an effect for dimensions 4 and higher.
		</constant>
		<constant name="PERP_FADE_TRANSPARENCY" value="1" enum="PerpFadeMode">
			Objects will fade out by becoming more transparent as they move farther away from the camera in the local perpendicular axes (W, V, U, etc). Only has an effect for dimensions 4 and higher.
		</constant>
		<constant name="PERP_FADE_HUE_SHIFT" value="2" enum="PerpFadeMode">
			Objects will fade out by shifting their hue as they move farther away from the camera in the local perpendicular axes (W, V, U, etc). Only has an effect for dimensions 4 and higher. Objects in the +W direction will shift to 0 degrees hue, objects in the -W direction will shift to 180 degrees hue. For dimensions 5 and higher, objects in the +V direction will shift to 90 degrees hue, and objects in the -V direction will shift to 270 degrees hue. For dimensions 6 and higher, other perpendicular axes will affect the magnitude of the hue shift, but not the hue itself.
		</constant>
		<constant name="PERP_FADE_TRANSPARENCY_HUE_SHIFT" value="3" enum="PerpFadeMode">
			Objects will fade out according to both [constant PERP_FADE_TRANSPARENCY] and [constant PERP_FADE_HUE_SHIFT].
		</constant>
	</constants>
</class>
